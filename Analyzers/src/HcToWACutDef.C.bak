#include "Selector.h"

vector<TString> Selector::getCuts(TString region) {
	if (region == "SR_3mu")
		return {"noCut", "METFilter", "3mu", "trigger", "safePtCut", "ExistOSdimu", "MOSdimu_ge12", "Nj_ge3", "Nb_ge2"};
	else if (region == "SR_1e2mu")
		return {"noCut", "METFilter", "1e2mu", "trigger", "safePtCut", "OSdimu", "MOSdimu_ge12", "Nj_ge3", "Nb_ge2"};
	else if (region == "ZFake_3mu")
		return {"noCut", "METFilter", "3mu", "trigger", "safePtCut", "ExistOSDimu", "MOSdimu_ge12", "OnshellZ", "NoBjet"};
	else if (region == "ZFake_1e2mu")
		return {"noCut", "METFilter", "1e2mu", "trigger", "safePtCut", "OSdimu", "OnshellZ", "NoBjet");
	else if (region == "DY_OSdimu")
		return {"noCut", "METFilter", "dimu", "trigger", "safePtCut", "OSdimu", "OnshellZ", "NoBjet"};
	else if (region == "TT_OSdimu")
		return {"noCut", "METFilter", "dimu", "trigger", "safePtCut", "OSdimu", "OffshellZ", "MOsdimu_ge12", "MET_ge40", "dRll_ge04", "Nj_ge2", "Nb_ge2"};
	else if (region == "TT_OSemu")
		return {"noCut", "METFilter", "emu", "trigger", "safePtCut", "OSemu", "dRll_ge04", "Nj_ge2", "Nb_ge1"};
	else {
		cerr << "[Selector::getCuts] wrong region " << region << endl;
		exit(EXIT_FAILURE);
	}
}

//===== Event Selection =====//
// Define each cuts
TString Selector::RegionSelector(
		Event& ev,
		vector<Muon>& muons_tight, vector<Electron>& electrons_tight,
		vector<Muon>& muons_loose, vector<Electron>& electrons_loose,
		vector<Jet>& jets, vector<Jet>& bjets, Particle& METv, const TString syst) {
	TString region;
	// devide by leptons first
	if (muons_tight.size() == 2 && muons_loose.size() == 2
			&& electrons_tight.size() == 0 && electrons_loose.size() == 0)
		region = "dimu";
	else if (muons_tight.size() == 3 && muons_loose.size() == 3
			&& electrons_tight.size() == 0 && electrons_loose.size() == 0)
		region = "3mu";
	else if (muons_tight.size() == 1 && muons_loose.size() == 1
			&& electrons_tight.size() == 1 && electrons_loose.size() == 1)
		region = "emu";
	else if (muons_tight.size() == 2 && muons_loose.size() == 2
			&& electrons_tight.size() == 1 && electrons_loose.size() == 1)
		region = "1e2mu";
	else
		return "";

	if (!AllRegions) {
		if (DiLepOnly)
			if (region == "3mu" || region == "1e2mu") return "";
		if (TriLepOnly)
			if (region == "dimu" || region == "emu") return "";
	}

	// DY_OSdimu, TT_OSdimu
	if (region == "dimu") {
		FillCutflow("DY_OSdimu", "dimu", syst);
		FillCutflow("TT_OSdimu", "dimu", syst);
		if (!ev.PassTrigger(trigs_dblmu)) return "";
		FillCutflow("DY_OSdimu", "trigger", syst);
		FillCutflow("TT_OSdimu", "trigger", syst);

		const Muon& lead = muons_tight.at(0);
		const Muon& sub = muons_tight.at(1);
		if (! (lead.Pt() > 20.)) return "";
		if (! (sub.Pt() > 10.)) return "";
		FillCutflow("DY_OSdimu", "safePtCut", syst);
		FillCutflow("TT_OSdimu", "safePtCut", syst);

		if (lead.Charge() + sub.Charge() != 0) return "";
		FillCutflow("DY_OSdimu", "OSdimu", syst);
		FillCutflow("TT_OSdimu", "OSdimu", syst);

		// divide DY and TT
		Particle ZCand = lead + sub;
		if (fabs(ZCand.M() - 91.2) < 15.) {
			// DY_OSdimu
			FillCutflow("DY_OSdimu", "OnshellZ", syst);
			
			if (bjets.size() > 0) return "";
			FillCutflow("DY_OSdimu", "NoBjet", syst);
			
			return "DY_OSdimu";
		}
		else {
			// TT_OSdimu
			FillCutflow("TT_OSdimu", "OffshellZ", syst);

			if (ZCand.M() < 12.) return "";
			FillCutflow("TT_OSdimu", "MOsdimu_ge12", syst);

			if (METv.Pt() < 40.) return "";
			FillCutflow("TT_OSdimu", "MET_ge40", syst);


			if (lead.DeltaR(sub) < 0.4) return "";
			FillCutflow("TT_OSdimu", "dRll_ge04", syst);

			if (jets.size() < 2) return "";
			FillCutflow("TT_OSdimu", "Nj_ge2", syst);

			if (bjets.size() < 2) return "";
			FillCutflow("TT_OSdimu", "Nb_ge2", syst);
			
			return "TT_OSdimu";
		}
	}
	else if (region == "emu") {
		// TT_OSemu
		FillCutflow("TT_OSemu", "emu", syst);
		
		if (!ev.PassTrigger(trigs_emu)) return "";
		FillCutflow("TT_OSemu", "trigger", syst);

		const Muon& mu = muons_tight.at(0);
		const Electron& ele = electrons_tight.at(0);
		bool passSafeCut = false;
		if (mu.Pt() > 10. && ele.Pt() > 25.) passSafeCut = true;
		if (mu.Pt() > 25. && ele.Pt() > 15.) passSafeCut = true;
		if (!passSafeCut) return "";
		FillCutflow("TT_OSemu", "safePtCut", syst);

		if (mu.Charge() + ele.Charge() != 0) return "";
		FillCutflow("TT_OSemu", "OSemu", syst);

		if (mu.DeltaR(ele) < 0.4) return "";
		FillCutflow("TT_OSemu", "dRll_ge04", syst);

		if (jets.size() < 2) return "";
		FillCutflow("TT_OSemu", "Nj_ge2", syst);

		if (bjets.size() < 1) return "";
		FillCutflow("TT_OSemu", "Nb_ge1", syst);
		
		return "TT_OSemu";
	}
	else if (region == "3mu") {
		// SR_3mu, ZFake_3mu
		FillCutflow("SR_3mu", "3mu", syst);
		FillCutflow("ZFake_3mu", "3mu", syst);
		
		if (!ev.PassTrigger(trigs_dblmu)) return "";
		FillCutflow("SR_3mu", "trigger", syst);
		FillCutflow("ZFake_3mu", "trigger", syst);

		const Muon& mu1 = muons_tight.at(0);
		const Muon& mu2 = muons_tight.at(1);
		const Muon& mu3 = muons_tight.at(2);
		if (mu1.Pt() < 20.) return "";
		if (mu2.Pt() < 10.) return "";
		if (mu3.Pt() < 10.) return "";
		FillCutflow("SR_3mu", "safePtCut", syst);
		FillCutflow("ZFake_3mu", "safePtCut", syst);

		const int chargeSum = mu1.Charge() + mu2.Charge() + mu3.Charge();
		if (abs(chargeSum) != 1) return "";
		FillCutflow("SR_3mu", "ExistOSdimu", syst);
		FillCutflow("ZFake_3mu", "ExistOSdimu", syst);

		const Particle ZCand1 = mu1 + mu2;
		const Particle ZCand2 = mu2 + mu3;
		const Particle ZCand3 = mu1 + mu3;
		if (mu1.Charge() + mu2.Charge() == 0 && ZCand1.M() < 12.) return "";
		if (mu2.Charge() + mu3.Charge() == 0 && ZCand2.M() < 12.) return "";
		if (mu1.Charge() + mu3.Charge() == 0 && ZCand3.M() < 12.) return "";
		FillCutflow("SR_3mu", "MOSdimu_ge12", syst);
		FillCutflow("ZFake_3mu", "MOSdimu_ge12", syst);

		bool existOnshellZ = false;
		if (mu1.Charge() + mu2.Charge() == 0 && fabs(ZCand1.M() - 91.2) < 10.) existOnshellZ = true;
		if (mu2.Charge() + mu3.Charge() == 0 && fabs(ZCand2.M() - 91.2) < 10.) existOnshellZ = true;
		if (mu1.Charge() + mu3.Charge() == 0 && fabs(ZCand3.M() - 91.2) < 10.) existOnshellZ = true;

		// Divde SR and ZFake
		if (jets.size() > 3 && bjets.size() > 2) 
			region = "SR_3mu";
		else if (existOnshellZ && bjets.size() == 0)
			region = "ZFake_3mu";
		else 
			region = "";

		if (region == "SR_3mu")
			if (jets.size() > 3)
			
	
	}
	else if (region == "1e2mu") {
		// SR_1e2mu, WZ_1e2mu
		// "noCut", "METFilter", "1e2mu", "trigger", "safePtCut", "OSdimu", "MOSdimu_g    e12", "Nj_le1", "NoBjet"
		// "noCut", "METFilter", "1e2mu", "trigger", "safePtCut", "OSdimu", "MOSdimu_g    e12","Nj_ge2", "Nb_ge1"
		FillCutflow("SR_1e2mu", "1e2mu", syst);
		FillCutflow("WZ_1e2mu", "1e2mu", syst);

		const Muon& lead = muons_tight.at(0);
		const Muon& sub = muons_tight.at(1);
		const Electron& ele = electrons_tight.at(0);
		bool passSafeCut = false;
		if (EMuTrigOnly) {
			if (!ev.PassTrigger(trigs_emu)) return "";
			FillCutflow("SR_1e2mu", "trigger", syst);
			FillCutflow("WZ_1e2mu", "trigger", syst);

			if (lead.Pt() > 10. && ele.Pt() > 25.) passSafeCut = true;
			if (lead.Pt() > 25. && ele.Pt() > 15.) passSafeCut = true;
			if (!passSafeCut) return "";
			FillCutflow("SR_1e2mu", "safePtCut", syst);
			FillCutflow("WZ_1e2mu", "safePtCut", syst);
		}
		else {
			if (IsDATA && DataStream=="DoubleMuon") {
				if (!(ev.PassTrigger(trigs_dblmu))) return "";
				FillCutflow("SR_1e2mu", "trigger", syst);
				FillCutflow("WZ_1e2mu", "trigger", syst);

				if (lead.Pt() > 20. && sub.Pt() > 10.) passSafeCut = true;
				if (!passSafeCut) return "";
				FillCutflow("SR_1e2mu", "safePtCut", syst);
				FillCutflow("WZ_1e2mu", "safePtCut", syst);
			}
			else if (IsDATA && DataStream=="MuonEG") {
				if (!(ev.PassTrigger(trigs_emu))) return "";
				FillCutflow("SR_1e2mu", "trigger", syst);
				FillCutflow("WZ_1e2mu", "trigger", syst);

				if (lead.Pt() > 10. && ele.Pt() > 25.) passSafeCut = true;
				if (lead.Pt() > 25. && ele.Pt() > 15.) passSafeCut = true;
				if (!passSafeCut) return "";
				FillCutflow("SR_1e2mu", "safePtCut", syst);
				FillCutflow("WZ_1e2mu", "safePtCut", syst);
			}
			else {
				// MC
				if (!(ev.PassTrigger(trigs_emu) || ev.PassTrigger(trigs_dblmu))) return "";
				FillCutflow("SR_1e2mu", "trigger", syst);
				FillCutflow("WZ_1e2mu", "trigger", syst);

				if (ev.PassTrigger(trigs_dblmu)) {
					if (lead.Pt() > 20. && sub.Pt() > 10.) passSafeCut = true;
				}
				else {
					// not pass dblmu but pass emu
					if (lead.Pt() > 10. && ele.Pt() > 25.) passSafeCut = true;
					if (lead.Pt() > 25. && ele.Pt() > 15.) passSafeCut = true;
				}
				if (!passSafeCut) return "";
				FillCutflow("SR_1e2mu", "safePtCut", syst);
				FillCutflow("SR_1e2mu", "safePtCut", syst);
			}
		}

		if (lead.Charge() + sub.Charge() != 0) return "";
		FillCutflow("SR_1e2mu", "OSdimu", syst);
		FillCutflow("WZ_1e2mu", "OSdimu", syst);

		const Particle ZCand = lead+sub;
		if (ZCand.M() < 12.) return "";
		FillCutflow("SR_1e2mu", "MOSdimu_ge12", syst);
		FillCutflow("WZ_1e2mu", "MOSdimu_ge12", syst);

		if (jets.size() > 1.) {
			FillCutflow("SR_1e2mu", "Nj_ge2", syst);
			
			if (bjets.size() < 1.) return "";
			FillCutflow("SR_1e2mu", "Nb_ge1", syst);
			return "SR_1e2mu";
		}
		else {
			FillCutflow("WZ_1e2mu", "Nj_le1", syst);
			if (bjets.size() > 1.) return "";
			FillCutflow("WZ_1e2mu", "NoBjet", syst);
			return "WZ_1e2mu";
		}
	}
}
